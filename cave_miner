#!/usr/bin/env python
# -*- coding: utf-8 -*-
"""Search for code cave in all binaries
Usage:
  cave_miner search [--size=<size>] <file_name>

Options:
  -h --help      Show this help
  --version      Show the program version
  --size=<size>  The minimum size of the cave in bytes [default: 256]
"""
from docopt import docopt
from lib import *

def search_cave(section, cave_size):
  null_count = 0

  for offset in xrange(len(section.body)):
    byte = section.body[offset]

    if byte == "\x00":
      null_count += 1
    else:
      if null_count >= int(cave_size):
        print "{}[*]{} New cave detected !{}".format(Bcolors.YELLOW, Bcolors.BOLD, Bcolors.ENDC)
        print "  section_name: {}".format(section.name)
        print "  cave_begin:   0x{:08x}".format(section.pointer_to_raw_data + offset)
        print "  cave_end:     0x{:08x}".format(section.pointer_to_raw_data + offset + null_count)
        print

      null_count = 0

def search(filename, cavesize):
  print "{}[*]{} Starting cave mining process...{}".format(Bcolors.YELLOW, Bcolors.BOLD, Bcolors.ENDC)
  print

  g = MicrosoftPe.from_file(filename)

  for section in g.sections:
    search_cave(section, cavesize)

  print "{}[*]{} Mining finished.{}".format(Bcolors.YELLOW, Bcolors.BOLD, Bcolors.ENDC)

def print_banner():
  print """
    {gy}/========\{e}
   {gy}/{e}    {gn}||{e}    {gy}\{e}
        {gn}||{e}
        {gn}||{e}
        {gn}||{e}
   ℂᎪᏙᎬ {gn}||{e} ᎷⅠℕᎬᎡ
  """.format(gy=Bcolors.GREY, gn=Bcolors.GREEN, e=Bcolors.ENDC)

if __name__ == '__main__':
  print_banner()
  args = docopt(__doc__, version='0.1')

  if args["search"] == True:
    search(args["<file_name>"], args["--size"])
